---
import Footer from '../components/Footer.astro';
import Nav from '../components/Nav.astro';
import './global.css';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = 'Maxime Bernard',
	description = 'Everything work related about Maxime Bernard',
} = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<title>{title}</title>
		<meta name="description" property="og:description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
			rel="stylesheet"
		/>

		<script is:inline>
			// This code is inlined in the head to make dark mode instant & blocking.
			const getThemePreference = () => {
				if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
					return localStorage.getItem('theme');
				}
				return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
			};
			const isDark = getThemePreference() === 'dark';
			document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');
		
			if (typeof localStorage !== 'undefined') {
				// Watch the document element and persist user preference when it changes.
				const observer = new MutationObserver(() => {
					const isDark = document.documentElement.classList.contains('theme-dark');
					localStorage.setItem('theme', isDark ? 'dark' : 'light');
				});
				observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
			}
		</script>
	</head>
	<body>
		<div class="stack backgrounds">
			<Nav />
			<slot />
			<Footer />
		</div>

		<script>
			// Add “loaded” class once the document has completely loaded.
			addEventListener('load', () => document.documentElement.classList.add('loaded'));
		</script>
	</body>
</html>